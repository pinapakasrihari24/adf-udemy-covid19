{
	"name": "df_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "HASourceRAW"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryLookUp"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceDimData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admisson_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeeklyData"
				},
				{
					"dataset": {
						"referenceName": "ds_hospital_admission_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDailyData"
				}
			],
			"transformations": [
				{
					"name": "selectRequiredFields"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectCountryLookUpRemoveExtraFields"
				},
				{
					"name": "splitDataDailyCounts"
				},
				{
					"name": "aggregateYearStDateEndDate"
				},
				{
					"name": "joinWithDateDerived"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeeklyData"
				},
				{
					"name": "sortDailyData"
				},
				{
					"name": "selectWeeklySortedData"
				},
				{
					"name": "selectDailySortedData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HASourceRAW",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookUp",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimData",
				"HASourceRAW select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredFields",
				"selectRequiredFields, countryLookUp lookup(selectRequiredFields@country == countryLookUp@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = selectRequiredFields@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCountryLookUpRemoveExtraFields",
				"selectCountryLookUpRemoveExtraFields split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitDataDailyCounts@(Weekly, Daily)",
				"sourceDimData aggregate(groupBy(year_week_derived = concat(year,'-W',lpad(week_of_year,2,'0'))),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregateYearStDateEndDate",
				"splitDataDailyCounts@Weekly, aggregateYearStDateEndDate join(reported_year_week == year_week_derived,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDateDerived",
				"joinWithDateDerived pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: false) ~> pivotWeekly",
				"splitDataDailyCounts@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeeklyData",
				"pivotDaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDailyData",
				"sortWeeklyData select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100kcount},",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100kcount},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeeklySortedData",
				"sortDailyData select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {Daily hospital occupancycount},",
				"          icu_occupancy_count = {Daily ICU occupancycount},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDailySortedData",
				"selectWeeklySortedData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeeklyData",
				"selectDailySortedData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDailyData"
			]
		}
	}
}